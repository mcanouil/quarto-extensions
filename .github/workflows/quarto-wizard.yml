name: Quarto Wizard

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: main
    paths:
      - extensions/quarto-extensions.csv
  schedule:
    - cron: "0 6 * * *"

jobs:
  quarto-wizard:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.github_token }}
      BRANCH: quarto-wizard
      COMMIT: "ci: update extensions details"
      CSV_FILE: "extensions/quarto-extensions.csv"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.CSV_FILE }}
          sparse-checkout-cone-mode: false
          path: data

      - name: Git Config
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Branch Setup
        if: false
        shell: bash
        run: |
          git fetch --all
          if git show-ref --verify --quiet refs/heads/"${BRANCH}"; then
            echo "Branch exists"
          else
            echo "Branch does not exist"
            git checkout --orphan "${BRANCH}"
            git rm -rf .
            git commit --allow-empty -m "ci: setup ${BRANCH} branch"
            git push --force origin "${BRANCH}"
          fi
          git checkout "${BRANCH}"

      - name: Get extensions details
        shell: bash
        run: |
          JSON_FILE="quarto-extensions.json"
          echo "*" > .gitignore
          echo "!${JSON_FILE}" > .gitignore

          EXTENSION_DETAILS=()
          while IFS=, read -r entry; do
            echo "Processing entry: ${entry}"
            repo=$(echo "${entry}" | cut -d'/' -f1,2)
            repo_info=$(
              gh repo view "${repo}" \
                --json name,nameWithOwner,owner,description,openGraphImageUrl,stargazerCount,licenseInfo,url,latestRelease,createdAt,updatedAt,repositoryTopics,defaultBranchRef \
                --jq '{
                  name: .name,
                  title: (.name | split("-|_"; "") | map(select(. != "quarto" and . != "template")) | join(" ") | ascii_upcase),
                  nameWithOwner: (.nameWithOwner | ascii_downcase),
                  owner: (.owner.login | ascii_downcase),
                  description: (if .description == "" then "No description available." else .description end),
                  openGraphImageUrl: .openGraphImageUrl,
                  stargazerCount: (.stargazerCount // 0),
                  licenseInfo: (.licenseInfo.name // "none"),
                  url: .url,
                  latestRelease: (.latestRelease.tagName // "none"),
                  latestReleaseUrl: (.latestRelease.url // null),
                  createdAt: .createdAt,
                  updatedAt: .updatedAt,
                  defaultBranchRef: .defaultBranchRef.name,
                  repositoryTopics: (if .repositoryTopics == null then [] else 
                  [.repositoryTopics[].name | 
                    sub("^quarto-"; "") | 
                    sub("-template[s]*"; "") | 
                    if test("filters$|formats$|journals$") then sub("s$"; "") else . end | 
                    sub("reveal-js"; "reveal.js") | 
                    sub("revealjs"; "reveal.js") | 
                    select(test("quarto|extension|^pub$") | not)] | unique 
                  end)
                }'
            )
            owner=$(echo "${repo_info}" | jq -r ".owner")
            author=$(gh api "users/${owner}" --jq ".name")
            if [[ -z "${author}" ]]; then
              author="${owner}"
            fi
            repo_info=$(echo "${repo_info}" | jq --arg author "${author}" '. + {author: $author}')
            repo_info=$(echo "${repo_info}" | jq --arg entry "${entry,,}" '{($entry): .}')
            EXTENSION_DETAILS+=("${repo_info}")
          done < <(sort -f data/${CSV_FILE})
          json_output=$(printf "%s\n" "${EXTENSION_DETAILS[@]}" | jq -s 'add')
          echo "${json_output}" > "${JSON_FILE}"

          git add ${JSON_FILE} || echo "No changes to commit"
          git commit --allow-empty -m "${COMMIT}"
          git push --force origin ${BRANCH}
