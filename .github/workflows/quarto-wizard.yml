name: Quarto Wizard

on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        required: false
        default: false
        type: boolean
  repository_dispatch:
  release:
    types: [published]
  push:
    branches:
      - main
    paths:
      - extensions/quarto-extensions.csv
  schedule:
    - cron: "0 6 * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  get-extensions:
    runs-on: ubuntu-latest
    outputs:
      updated-count: ${{ steps.get-extensions-details.outputs.updated-count }}
      skipped-count: ${{ steps.get-extensions-details.outputs.skipped-count }}
      updated-extensions: ${{ steps.get-extensions-details.outputs.updated-extensions }}
      skipped-extensions: ${{ steps.get-extensions-details.outputs.skipped-extensions }}
    env:
      BRANCH: quarto-wizard
      COMMIT: "ci: update extensions details"
      CSV_FILE: "extensions/quarto-extensions.csv"
      JSON_FILE: "quarto-extensions.json"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: Checkout repository with sparse checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.CSV_FILE }}
          sparse-checkout-cone-mode: false
          path: data

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        shell: bash
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Git Config
        shell: bash
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Branch Setup
        if: false
        shell: bash
        run: |
          git fetch --all
          if git show-ref --verify --quiet refs/heads/"${BRANCH}"; then
            echo "Branch exists"
          else
            echo "Branch does not exist"
            git checkout --orphan "${BRANCH}"
            git rm -rf .
            git commit --allow-empty -m "ci: setup ${BRANCH} branch"
            git push --force origin "${BRANCH}"
          fi
          git checkout "${BRANCH}"

      - name: Get extensions details
        id: get-extensions-details
        shell: bash
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -e

          JSON_FILE=${JSON_FILE:-"quarto-extensions.json"}
          BRANCH=${BRANCH:-"quarto-wizard"}
          COMMIT=${COMMIT:-"ci: update extensions details"}
          CSV_FILE=${CSV_FILE:-"extensions/quarto-extensions.csv"}

          EXTENSIONS_DIR="extensions"
          mkdir -p "${EXTENSIONS_DIR}"

          previous_owner=""
          previous_author=""
          updated_extensions=()
          skipped_extensions=()

          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            CSV_ENTRIES=$(head -n 5 data/${CSV_FILE})
          else
            CSV_ENTRIES=$(cat data/${CSV_FILE})
          fi

          while IFS=, read -r entry; do
            echo "Processing entry: ${entry}"
            repo=$(echo "${entry}" | cut -d'/' -f1,2)

            repo_info=$(
              gh repo view "${repo}" \
                --json name,nameWithOwner,owner,description,openGraphImageUrl,stargazerCount,licenseInfo,url,latestRelease,createdAt,updatedAt,repositoryTopics,defaultBranchRef \
                --jq '{
                  name: .name,
                  title: (.name | split("-|_"; "") | map(select(. != "quarto" and . != "template")) | join(" ") | ascii_upcase),
                  nameWithOwner: (.nameWithOwner | ascii_downcase),
                  owner: (.owner.login | ascii_downcase),
                  description: (if .description == "" then "No description available." else .description end),
                  openGraphImageUrl: .openGraphImageUrl,
                  stargazerCount: (.stargazerCount // 0),
                  licenseInfo: (.licenseInfo.name // "none"),
                  url: .url,
                  latestRelease: (.latestRelease.tagName // "none"),
                  latestReleaseUrl: (.latestRelease.url // null),
                  createdAt: .createdAt,
                  updatedAt: .updatedAt,
                  defaultBranchRef: .defaultBranchRef.name,
                  repositoryTopics: (if .repositoryTopics == null then [] else
                  [.repositoryTopics[].name |
                    sub("^quarto-"; "") |
                    sub("-template[s]*"; "") |
                    if test("filters$|formats$|journals$|templates|shortcodes$|extensions$") then sub("s$"; "") else . end |
                    sub("reveal-js"; "reveal.js") |
                    sub("revealjs"; "reveal.js") |
                    select(test("quarto|extension|template|^pub$") | not)] | unique
                  end)
                }'
            )

            # Check if existing JSON file has same updatedAt date
            nameWithOwner=$(echo "${repo_info}" | jq -r ".nameWithOwner")
            owner=$(echo "${repo_info}" | jq -r ".owner")
            extension_json_file="${EXTENSIONS_DIR}/${nameWithOwner}/extension.json"
            author_json_file="${EXTENSIONS_DIR}/${owner}/author.json"

            owner=$(echo "${repo_info}" | jq -r ".owner")
            if [[ "${owner}" == "${previous_owner}" ]]; then
              author="${previous_author}"
            else
              author_payload=$(gh api "users/${owner}")
              author=$(echo "${author_payload}" | jq -r ".name")
              if [[ -z "${author}" ]]; then
                author="${owner}"
              fi
              author_updated_at=$(echo "${author_payload}" | jq -r ".updated_at")
              update_author_json=true
              if [[ -f "${author_json_file}" ]]; then
                existing_author_updated_at=$(jq -r ".updated_at // empty" "${author_json_file}")
                if [[ -n "${existing_author_updated_at}" && "${existing_author_updated_at}" == "${author_updated_at}" ]]; then
                  echo "Skipping author.json for ${owner}: updated_at matches existing record (${existing_author_updated_at})"
                  update_author_json=false
                fi
              fi
              if [[ "${update_author_json}" == "true" ]]; then
                mkdir -p "$(dirname \"${author_json_file}\")"
                echo "${author_payload}" > "${author_json_file}"
                git add "${author_json_file}" || echo "No changes detected, skipping commit"
              fi
              previous_owner="${owner}"
              previous_author="${author}"
            fi
            repo_info=$(echo "${repo_info}" | jq --arg author "${author}" '. + {author: $author}')

            if [[ -f "${extension_json_file}" ]]; then
              existing_updated_at=$(jq -r ".[\"${entry,,}\"].updatedAt // empty" "${extension_json_file}")
              current_updated_at=$(echo "${repo_info}" | jq -r ".updatedAt")

              if [[ -n "${existing_updated_at}" && "${existing_updated_at}" == "${current_updated_at}" ]]; then
                echo "Skipping ${entry}: updatedAt matches existing record (${existing_updated_at})"
                skipped_extensions+=("${entry}")
                continue
              fi
            else
              echo "Processing ${entry}: JSON file does not exist, will create new record"
            fi

            repo_subdirectory=$(echo "${entry}" | cut -d'/' -f3-)
            if [[ -n "${repo_subdirectory}" ]]; then
              repo_subdirectory="${repo_subdirectory}/"
              repo_recursive="?recursive=1"
            fi
            repo_tag=$(echo "${repo_info}" | jq -r ".latestRelease")
            if [[ "${repo_tag}" != "none" ]]; then
              repo_branch="${repo_tag}"
            else
              repo_branch=$(echo "${repo_info}" | jq -r ".defaultBranchRef")
            fi
            repo_template=$(
              gh api \
              -X GET "repos/${repo}/git/trees/${repo_branch}${repo_recursive}" \
              --jq ".tree[] | select(.path | endswith(\"${repo_subdirectory}template.qmd\")) | .url | @sh" | xargs -I {} gh api -X GET {} --jq ".content"
            )
            if [[ -n "${repo_template}" ]]; then
              repo_info=$(echo "${repo_info}" | jq '. + {template: true} | .repositoryTopics += ["template"]')
              repo_info=$(echo "${repo_info}" | jq --arg content "${repo_template}" '. + {templateContent: $content}')
            else
              repo_info=$(echo "${repo_info}" | jq '. + {template: false, templateContent: null}')
            fi
            repo_example=$(
              gh api \
              -X GET "repos/${repo}/git/trees/${repo_branch}${repo_recursive}" \
              --jq ".tree[] | select(.path | endswith(\"${repo_subdirectory}example.qmd\")) | .url | @sh" | xargs -I {} gh api -X GET {} --jq ".content"
            )
            if [[ -n "${repo_example}" ]]; then
              repo_info=$(echo "${repo_info}" | jq '. + {example: true} | .repositoryTopics += ["example"]')
              repo_info=$(echo "${repo_info}" | jq --arg content "${repo_example}" '. + {exampleContent: $content}')
            else
              repo_info=$(echo "${repo_info}" | jq '. + {example: false, exampleContent: null}')
            fi

            # Create owner directory and save individual JSON file
            mkdir -p "$(dirname "${extension_json_file}")"
            echo "${repo_info}" | jq --arg entry "${entry,,}" '{($entry): .}' > "${extension_json_file}"
            updated_extensions+=("${entry}")
            git add "${extension_json_file}" || echo "No changes detected, skipping commit"
          done < <(echo "$CSV_ENTRIES" | sort -f)

          # Save summary data as job outputs
          {
            echo "updated-count=${#updated_extensions[@]}"
            echo "skipped-count=${#skipped_extensions[@]}"
            echo "updated-extensions=$(printf '%s,' "${updated_extensions[@]}" | sed 's/,$//')"
            echo "skipped-extensions=$(printf '%s,' "${skipped_extensions[@]}" | sed 's/,$//')"
          } >> "${GITHUB_OUTPUT}"

          echo "::notice title=Updated Extensions::Count: ${#updated_extensions[@]}"

          find "${EXTENSIONS_DIR}" -type f -path "${EXTENSIONS_DIR}/*/*/extension.json" | xargs cat | jq -s 'add' > "${JSON_FILE}"

          git add "${JSON_FILE}" || echo "No changes detected, skipping commit"
          git commit --allow-empty -m "${COMMIT}"
          if [[ "${{ github.event.inputs.debug }}" == "false" ]]; then
            git push --force origin ${BRANCH}
          else
            echo "Debug mode is enabled, skipping push"
          fi

  summary:
    runs-on: ubuntu-latest
    needs:
      - get-extensions
    if: always()
    env:
      BRANCH: quarto-wizard
      UPDATED_COUNT: ${{ needs.get-extensions.outputs.updated-count }}
      SKIPPED_COUNT: ${{ needs.get-extensions.outputs.skipped-count }}
      UPDATED_EXTENSIONS: ${{ needs.get-extensions.outputs.updated-extensions }}
      SKIPPED_EXTENSIONS: ${{ needs.get-extensions.outputs.skipped-extensions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: Generate workflow summary
        shell: bash
        run: |
          # Use environment variables from job outputs
          UPDATED_COUNT=${UPDATED_COUNT:-0}
          SKIPPED_COUNT=${SKIPPED_COUNT:-0}
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            echo "## Extension Processing Summary (Debug Mode)" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "## Extension Processing Summary" >> "${GITHUB_STEP_SUMMARY}"
          fi
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Updated Extensions (${UPDATED_COUNT})" >> "${GITHUB_STEP_SUMMARY}"
          if [[ "${UPDATED_COUNT}" -eq 0 ]]; then
            echo "No extensions were updated." >> "${GITHUB_STEP_SUMMARY}"
          else
            IFS=',' read -ra EXTENSIONS <<< "${UPDATED_EXTENSIONS}"
            for ext in "${EXTENSIONS[@]}"; do
              [[ -n "${ext}" ]] && echo "- ${ext}" >> "${GITHUB_STEP_SUMMARY}"
            done
          fi
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Skipped Extensions (${SKIPPED_COUNT})" >> "${GITHUB_STEP_SUMMARY}"
          if [[ "${SKIPPED_COUNT}" -eq 0 ]]; then
            echo "No extensions were skipped." >> "${GITHUB_STEP_SUMMARY}"
          else
            IFS=',' read -ra EXTENSIONS <<< "${SKIPPED_EXTENSIONS}"
            for ext in "${EXTENSIONS[@]}"; do
              [[ -n "${ext}" ]] && echo "- ${ext}" >> "${GITHUB_STEP_SUMMARY}"
            done
          fi
