name: Check Extensions

on:
  workflow_dispatch:
  pull_request:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: read

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUMBER: ${{ github.event.pull_request.number }}
  CSV_FILE: "extensions/quarto-extensions.csv"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  check-submission:
    runs-on: ubuntu-latest
    outputs:
      submission: ${{ steps.check-submission.outputs.SUBMISSION }}
      diff: ${{ steps.check-submission.outputs.DIFF }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for submission
        id: check-submission
        env:
          base_sha: ${{ github.event.pull_request.base.sha }}
          head_sha: ${{ github.event.pull_request.head.sha }}
          base_ref: ${{ github.event.pull_request.base.ref }}
        shell: bash
        run: |
          set -x
          extension_submitted=$(git diff --name-only ${base_sha} ${head_sha} | grep "${CSV_FILE}" || true)
          if [[ -z "${extension_submitted}" ]]; then
            echo "::notice::No changes to ${CSV_FILE} found"
            echo "SUBMISSION=false" >>"${GITHUB_OUTPUT}"
          else
            echo "::notice::Changes to ${CSV_FILE} found!"
            echo "SUBMISSION=true" >>"${GITHUB_OUTPUT}"
            git fetch origin ${base_ref} --depth=1
            DIFF=$(
              git diff origin/${base_ref} HEAD -- ${CSV_FILE} | grep '^+[^+]' | sed 's/^+//' | base64 --wrap=0
            )
            echo "DIFF=${DIFF}" >>"${GITHUB_OUTPUT}"
          fi
          exit 0

  check-duplicate:
    runs-on: ubuntu-latest
    needs: check-submission
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for duplicates
        if: needs.check-submission.outputs.submission == 'true'
        shell: bash
        run: |
          error=false
          sort -f "${CSV_FILE}" | uniq -di > duplicates.txt
          if [[ -s duplicates.txt ]]; then
            while IFS= read -r duplicate; do
              grep -n "${duplicate}" "${CSV_FILE}" | tail -n +2 > duplicate_lines.txt
              while IFS= read -r line; do
                lineNumber=${line%%:*}
                echo "::error file=${CSV_FILE},line=${lineNumber},endLine=${lineNumber},title=Duplicate Entry::Duplicate value \"${duplicate}\" found"
                error=true
              done < duplicate_lines.txt
            done < duplicates.txt
          fi
          rm -f duplicates.txt duplicate_lines.txt
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-topics:
    runs-on: ubuntu-latest
    needs: check-submission
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for topics
        if: needs.check-submission.outputs.submission == 'true'
        shell: bash
        run: |
          echo ${{ needs.check-submission.outputs.diff }} | base64 --decode > diff.patch
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
              repo_topics=$(gh repo view --json repositoryTopics "${repo}" --jq ".repositoryTopics")
              if [[ -z "${repo_topics}" ]]; then
                lineNumber=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                echo "::error file=${CSV_FILE},line=${lineNumber},endLine=${lineNumber}::Repository \"${repo}\" is missing topics!"
                error=true
              fi
            done < diff.patch
          fi
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0
  
  check-description:
    runs-on: ubuntu-latest
    needs: check-submission
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for description
        if: needs.check-submission.outputs.submission == 'true'
        shell: bash
        run: |
          echo ${{ needs.check-submission.outputs.diff }} | base64 --decode > diff.patch
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
              repo_description=$(gh repo view --json description "${repo}" --jq ".description")
              if [[ -z "${repo_description}" ]]; then
                lineNumber=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                echo "::error file=${CSV_FILE},line=${lineNumber},endLine=${lineNumber}::Repository \"${repo}\" is missing description!"
                error=true
              fi
            done < diff.patch
          fi
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0
  
  check-release:
    runs-on: ubuntu-latest
    needs: check-submission
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for release/tag
        if: needs.check-submission.outputs.submission == 'true'
        shell: bash
        run: |
          echo ${{ needs.check-submission.outputs.diff }} | base64 --decode > diff.patch
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
              repo_release=$(gh repo view --json latestRelease "${repo}" --jq ".latestRelease")
              if [[ -z "${repo_release}" ]]; then
                lineNumber=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                echo "::error file=${CSV_FILE},line=${lineNumber},endLine=${lineNumber}::Repository \"${repo}\" is missing release/tag!"
                error=true
              fi
            done < diff.patch
          fi
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-redirection:
    runs-on: ubuntu-latest
    needs: check-submission
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for redirection
        if: needs.check-submission.outputs.submission == 'true'
        shell: bash
        run: |
          error=false
          while IFS=, read -r entry; do
            repo=$(echo "${repo}" | cut -d'/' -f1-2)
            if curl -I -s "https://github.com/${repo}" | grep -q "HTTP/.* 30[127]"; then
              redirection_target=$(curl -Ls -o /dev/null -w "%{url_effective}" "https://github.com/${repo}")
              redirection_target=${redirection_target#"https://github.com/"}
              error_message="Repository \"${repo}\" is a redirected to \"${redirection_target}\"\!"
              lineNumber=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
              echo "::error file=${CSV_FILE},line=${lineNumber},endLine=${lineNumber}::${error_message}"
              error=true
            fi
          done < <(sort -f "${CSV_FILE}")
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0
