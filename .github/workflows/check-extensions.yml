name: Check Extensions

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUMBER: ${{ github.event.pull_request.number }}
  CSV_FILE: "extensions/quarto-extensions.csv"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  check-submission:
    runs-on: ubuntu-latest
    outputs:
      submission: ${{ steps.check-submission.outputs.SUBMISSION }}
      diff: ${{ steps.check-submission.outputs.DIFF }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for submission
        id: check-submission
        env:
          base_sha: ${{ github.event.pull_request.base.sha }}
          head_sha: ${{ github.event.pull_request.head.sha }}
          base_ref: ${{ github.event.pull_request.base.ref }}
        shell: bash
        run: |
          set -x
          extension_submitted=$(git diff --name-only ${base_sha} ${head_sha} | grep "${CSV_FILE}" || true)
          if [[ -z "${extension_submitted}" ]]; then
            echo "::notice::No changes to ${CSV_FILE} found"
            echo "SUBMISSION=false" >>${GITHUB_OUTPUT}
          else
            echo "::notice::Changes to ${CSV_FILE} found!"
            echo "SUBMISSION=true" >>${GITHUB_OUTPUT}
            git fetch origin ${base_ref} --depth=1
            DIFF=$(
              git diff origin/${base_ref} HEAD -- ${CSV_FILE} | grep '^+[^+]' | sed 's/^+//' | base64 --wrap=0
            )
            echo "DIFF=${DIFF}" >>${GITHUB_OUTPUT}
          fi
          exit 0

  check-duplicate:
    runs-on: ubuntu-latest
    needs: check-submission
    outputs:
      errors: ${{ steps.store-errors.outputs.errors }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for duplicates
        if: needs.check-submission.outputs.submission == 'true'
        id: check
        shell: bash
        run: |
          error=false
          errors_json="[]"
          sort -f "${CSV_FILE}" | uniq -di > duplicates.txt
          if [[ -s duplicates.txt ]]; then
            while IFS= read -r duplicate; do
              grep -n "${duplicate}" "${CSV_FILE}" | tail -n +2 > duplicate_lines.txt
              while IFS= read -r line; do
                line_number=${line%%:*}
                error_message="Duplicate value \"${duplicate}\" found"
                # echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number},title=Duplicate Entry::${error_message}"
                errors_json=$(echo ${errors_json} | jq --compact-output --arg line "${line_number}" '. += [{"line": $line, "message": "Repository is duplicated."}]')
                error=true
              done < duplicate_lines.txt
            done < duplicates.txt
          fi
          rm -f duplicates.txt duplicate_lines.txt
          echo "errors=${errors_json}" >> ${GITHUB_OUTPUT}
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: Store errors
        if: always() && needs.check-submission.outputs.submission == 'true'
        id: store-errors
        env:
          errors: ${{ steps.check.outputs.errors }}
        shell: bash
        run: |
          if [[ -z "${errors}" ]]; then
            errors="[]"
          fi
          echo "errors=${errors}" >> ${GITHUB_OUTPUT}
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-topics:
    runs-on: ubuntu-latest
    needs: check-submission
    outputs:
      errors: ${{ steps.store-errors.outputs.errors }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for topics
        if: needs.check-submission.outputs.submission == 'true'
        id: check
        env:
          DIFF: ${{ needs.check-submission.outputs.diff }}
        shell: bash
        run: |
          echo ${DIFF} | base64 --decode > diff.patch
          error=false
          errors_json="[]"
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
                repo_topics=$(gh repo view --json repositoryTopics "${repo}" --jq ".repositoryTopics")
              if [[ -z "${repo_topics}" ]]; then
                line_number=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                error_message="Repository \"${repo}\" is missing topics!"
                # echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number}::${error_message}"
                errors_json=$(echo ${errors_json} | jq --compact-output --arg line "${line_number}" '. += [{"line": $line, "message": "Repository is missing topics."}]')
                error=true
              fi
            done < diff.patch
          fi
          echo "errors=${errors_json}" >> ${GITHUB_OUTPUT}
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: Store errors
        if: always() && needs.check-submission.outputs.submission == 'true'
        id: store-errors
        env:
          errors: ${{ steps.check.outputs.errors }}
        shell: bash
        run: |
          if [[ -z "${errors}" ]]; then
            errors="[]"
          fi
          echo "errors=${errors}" >> ${GITHUB_OUTPUT}
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-description:
    runs-on: ubuntu-latest
    needs: check-submission
    outputs:
      errors: ${{ steps.store-errors.outputs.errors }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for description
        if: needs.check-submission.outputs.submission == 'true'
        id: check
        env:
          DIFF: ${{ needs.check-submission.outputs.diff }}
        shell: bash
        run: |
          echo ${DIFF} | base64 --decode > diff.patch
          error=false
          errors_json="[]"
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
              repo_description=$(gh repo view --json description "${repo}" --jq ".description")
              if [[ -z "${repo_description}" ]]; then
                line_number=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                error_message="Repository \"${repo}\" is missing description!"
                # echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number}::${error_message}"
                errors_json=$(echo ${errors_json} | jq --compact-output --arg line "${line_number}" '. += [{"line": $line, "message": "Repository is missing description."}]')
                error=true
              fi
            done < diff.patch
          fi
          echo "errors=${errors_json}" >> ${GITHUB_OUTPUT}
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: Store errors
        if: always() && needs.check-submission.outputs.submission == 'true'
        id: store-errors
        env:
          errors: ${{ steps.check.outputs.errors }}
        shell: bash
        run: |
          if [[ -z "${errors}" ]]; then
            errors="[]"
          fi
          echo "errors=${errors}" >> ${GITHUB_OUTPUT}
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-release:
    runs-on: ubuntu-latest
    needs: check-submission
    outputs:
      errors: ${{ steps.store-errors.outputs.errors }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for release/tag
        if: needs.check-submission.outputs.submission == 'true'
        id: check
        env:
          DIFF: ${{ needs.check-submission.outputs.diff }}
        shell: bash
        run: |
          echo ${DIFF} | base64 --decode > diff.patch
          error=false
          errors_json="[]"
          if [[ -s diff.patch ]]; then
            while IFS=, read -r repo; do
              repo=$(echo "${repo}" | cut -d'/' -f1-2)
              repo_release=$(gh repo view --json latestRelease "${repo}" --jq ".latestRelease")
              if [[ -z "${repo_release}" ]]; then
                line_number=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
                error_message="Repository \"${repo}\" is missing release/tag!"
                # echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number}::${error_message}"
                errors_json=$(echo ${errors_json} | jq --compact-output --arg line "${line_number}" '. += [{"line": $line, "message": "Repository is missing release/tag."}]')
                error=true
              fi
            done < diff.patch
          fi
          echo "errors=${errors_json}" >> ${GITHUB_OUTPUT}
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: Store errors
        if: always() && needs.check-submission.outputs.submission == 'true'
        id: store-errors
        env:
          errors: ${{ steps.check.outputs.errors }}
        shell: bash
        run: |
          if [[ -z "${errors}" ]]; then
            errors="[]"
          fi
          echo "errors=${errors}" >> ${GITHUB_OUTPUT}
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-redirection:
    runs-on: ubuntu-latest
    needs: check-submission
    outputs:
      errors: ${{ steps.store-errors.outputs.errors }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Check for redirection
        if: needs.check-submission.outputs.submission == 'true'
        id: check
        shell: bash
        run: |
          error=false
          errors_json="[]"
          while IFS=, read -r entry; do
            repo=$(echo "${repo}" | cut -d'/' -f1-2)
            if curl -I -s "https://github.com/${repo}" | grep -q "HTTP/.* 30[127]"; then
              redirection_target=$(curl -Ls -o /dev/null -w "%{url_effective}" "https://github.com/${repo}")
              redirection_target=${redirection_target#"https://github.com/"}
              error_message="Repository \"${repo}\" is redirected to \"${redirection_target}\"!"
              line_number=$(grep -n "${repo}" ${CSV_FILE} | cut -d: -f1)
              # echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number}::${error_message}"
              errors_json=$(echo ${errors_json} | jq --compact-output --arg line "${line_number}" '. += [{"line": $line, "message": "Repository is redirected."}]')
              error=true
            fi
          done < <(sort -f "${CSV_FILE}")
          echo "errors=${errors_json}" >> ${GITHUB_OUTPUT}
          if [[ "${error}" == "true" ]]; then
            exit 1
          fi
      - name: Store errors
        if: always() && needs.check-submission.outputs.submission == 'true'
        id: store-errors
        env:
          errors: ${{ steps.check.outputs.errors }}
        shell: bash
        run: |
          if [[ -z "${errors}" ]]; then
            errors="[]"
          fi
          echo "errors=${errors}" >> ${GITHUB_OUTPUT}
      - name: End of check
        if: needs.check-submission.outputs.submission == 'false'
        shell: bash
        run: |
          echo "No changes to ${CSV_FILE} found"
          exit 0

  check-summary:
    runs-on: ubuntu-latest
    needs:
      - check-submission
      - check-duplicate
      - check-topics
      - check-description
      - check-release
      - check-redirection
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Generate summary report
        if: needs.check-submission.outputs.submission == 'true'
        env:
          NUMBER: ${{ github.event.pull_request.number }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          DUPLICATE_RESULT: ${{ needs.check-duplicate.result }}
          TOPICS_RESULT: ${{ needs.check-topics.result }}
          DESCRIPTION_RESULT: ${{ needs.check-description.result }}
          RELEASE_RESULT: ${{ needs.check-release.result }}
          REDIRECTION_RESULT: ${{ needs.check-redirection.result }}
          DUPLICATE_ERRORS: ${{ needs.check-duplicate.outputs.errors }}
          TOPICS_ERRORS: ${{ needs.check-topics.outputs.errors }}
          DESCRIPTION_ERRORS: ${{ needs.check-description.outputs.errors }}
          RELEASE_ERRORS: ${{ needs.check-release.outputs.errors }}
          REDIRECTION_ERRORS: ${{ needs.check-redirection.outputs.errors }}
        shell: bash
        run: |
          echo "## Extension Check Summary" >> ${GITHUB_STEP_SUMMARY}
          echo "" >> ${GITHUB_STEP_SUMMARY}

          errors_found=false
          if [[ '${DUPLICATE_RESULT}' == "failure" || \
                '${TOPICS_RESULT}' == "failure" || \
                '${DESCRIPTION_RESULT}' == "failure" || \
                '${RELEASE_RESULT}' == "failure" || \
                '${REDIRECTION_RESULT}' == "failure" ]]; then
            errors_found=true
          fi

          if [[ "${errors_found}" == "true" ]]; then
            declare -A file_line_errors

            for errors_json in \
            '${DUPLICATE_ERRORS}' \
            '${TOPICS_ERRORS}' \
            '${DESCRIPTION_ERRORS}' \
            '${RELEASE_ERRORS}' \
            '${REDIRECTION_ERRORS}'; do
              if [[ "${errors_json}" != "[]" && "${errors_json}" != "" ]]; then
                while read -r error_obj; do
                  line=$(echo "${error_obj}" | jq -r '.line')
                  message=$(echo "${error_obj}" | jq -r '.message')

                  if [[ -z "${file_line_errors[${line}]}" ]]; then
                    file_line_errors["${line}"]="- ❌ ${message}"
                  else
                    file_line_errors["${line}"]+=$'\n- ❌ '"${message}"
                  fi
                done < <(echo "${errors_json}" | jq -c '.[]')
              fi
            done
            echo "The following issues were found in [\`${CSV_FILE}\`](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${PR_BRANCH}/${CSV_FILE}):" >> ${GITHUB_STEP_SUMMARY}
            echo "" >> ${GITHUB_STEP_SUMMARY}

            CSV_FILE_ENCODED=$(echo -n "${CSV_FILE}" | hexdump -v -e '/1 "%02x"' | sed 's/\(..\)/%\1/g')
            for line_number in $(echo "${!file_line_errors[@]}" | tr ' ' '\n' | sort -n); do
              entry=$(sed -n "${line_number}p" ${CSV_FILE})
              echo "::error file=${CSV_FILE},line=${line_number},endLine=${line_number}::Submission error\n${file_line_errors[${line_number}]}"
              echo "### Line [${line_number}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/pull/${NUMBER}/files#diff-${CSV_FILE_ENCODED}L${line_number}): [\`${entry}\`](${GITHUB_SERVER_URL}/${entry})" >> ${GITHUB_STEP_SUMMARY}
              echo "" >> ${GITHUB_STEP_SUMMARY}
              echo -e "${file_line_errors[${line_number}]}" >> ${GITHUB_STEP_SUMMARY}
              echo "" >> ${GITHUB_STEP_SUMMARY}
            done
          else
            echo "✅ All checks passed successfully!" >> ${GITHUB_STEP_SUMMARY}
            echo "" >> ${GITHUB_STEP_SUMMARY}
            echo "🔍 [View workflow run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> ${GITHUB_STEP_SUMMARY}
          fi

          mkdir -p ./extensions-check-summary
          echo ${NUMBER} > ./extensions-check-summary/pr_number
          cp ${GITHUB_STEP_SUMMARY} ./extensions-check-summary/summary.md

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Generate summary report
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        shell: bash
        run: |
          git config --global user.name '${APP_SLUG}[bot]'
          git config --global user.email '${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com'
          gh pr comment "$(cat ./extensions-check-summary/pr_number)" \
            --body-file ./extensions-check-summary/summary.md \
            --create-if-none \
            --edit-last \
            --repo ${GITHUB_REPOSITORY}
